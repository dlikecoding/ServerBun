CREATE SCHEMA IF NOT EXISTS multi_schema;

-- Create custom simple dictionary
CREATE TEXT SEARCH DICTIONARY multi_schema.simple_fullword (
    TEMPLATE = simple,
    STOPWORDS = english
);
CREATE TEXT SEARCH CONFIGURATION multi_schema.simple_config (COPY = pg_catalog.english);
ALTER TEXT SEARCH CONFIGURATION multi_schema.simple_config
  ALTER MAPPING FOR asciiword, asciihword, hword_asciipart
  WITH multi_schema.simple_fullword;

ALTER TEXT SEARCH CONFIGURATION multi_schema.simple_config
    DROP MAPPING FOR email, file, float, host, url, url_path, sfloat;

-- =============================================================================

-- ENUM definitions
CREATE TYPE role_type_enum AS ENUM ('user', 'admin');
CREATE TYPE file_type_enum AS ENUM ('Photo', 'Video', 'Live', 'Unknown');
CREATE TYPE registered_device_enum AS ENUM ('singleDevice', 'multiDevice');

-- =============================================================================
-- *****************************************************************************
-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS multi_schema."Album"
(
    album_id smallserial NOT NULL,
    "RegisteredUser" uuid NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    title character varying(50) COLLATE pg_catalog."default",
    modify_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "Album_pkey" PRIMARY KEY (album_id),
    CONSTRAINT "Album_title_key" UNIQUE (title)
);

CREATE TABLE IF NOT EXISTS multi_schema."AlbumMedia"
(
    album smallint NOT NULL,
    media integer NOT NULL,
    CONSTRAINT "AlbumMedia_pkey" PRIMARY KEY (album, media)
);

CREATE TABLE IF NOT EXISTS multi_schema."CameraType"
(
    camera_id serial NOT NULL,
    make character varying(50) COLLATE pg_catalog."default",
    model character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "CameraType_pkey" PRIMARY KEY (camera_id),
    CONSTRAINT unique_camera_model UNIQUE (model)
);

CREATE TABLE IF NOT EXISTS multi_schema."ErrorLog"
(
    error_log_id serial NOT NULL,
    file_error character varying(100) COLLATE pg_catalog."default" NOT NULL,
    stack_trace text COLLATE pg_catalog."default",
    func_occur character varying(150),
    server_system uuid,
    mark_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "ErrorLog_pkey" PRIMARY KEY (error_log_id)
);

CREATE TABLE IF NOT EXISTS multi_schema."Media"
(
    media_id serial NOT NULL,
    file_type file_type_enum NOT NULL,
    file_name text COLLATE pg_catalog."default",
    create_date timestamp without time zone,
    create_month smallint GENERATED ALWAYS AS (EXTRACT(month FROM create_date)) STORED,
    create_year smallint GENERATED ALWAYS AS (EXTRACT(year FROM create_date)) STORED,
    file_size bigint,
    hash_code character varying(65) COLLATE pg_catalog."default",
    hidden boolean DEFAULT false,
    favorite boolean DEFAULT false,
    deleted boolean DEFAULT false,
    deletion_date timestamp without time zone,
    upload_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    camera_type smallint,
    file_ext character varying(20),
    software character varying(256) COLLATE pg_catalog."default",
    source_file text COLLATE pg_catalog."default" NOT NULL,
    mime_type character varying(20) COLLATE pg_catalog."default",
    thumb_path text COLLATE pg_catalog."default",
    thumb_created boolean DEFAULT FALSE,
    image_width smallint,
    image_height smallint,
    caption text,
    caption_eng_tsv tsvector GENERATED ALWAYS AS (to_tsvector('english'::regconfig, caption)) STORED,
    caption_simple_tsv tsvector GENERATED ALWAYS AS (to_tsvector('multi_schema.simple_config'::regconfig, caption)) STORED,
    megapixels double precision,
    lens_model character varying(255),
    duration double precision,
    video_duration character varying(20),
    selected_frame double precision DEFAULT 0.1,
    orientation character varying(45),
    title character varying(255),
    frame_rate double precision,
    gps_latitude double precision,
    gps_longitude double precision,
    CONSTRAINT "Media_pkey" PRIMARY KEY (media_id),
    CONSTRAINT unique_source_path UNIQUE (source_file)
);

CREATE TABLE IF NOT EXISTS multi_schema."Passkeys"
(
    cred_id character varying(50) COLLATE pg_catalog."default" NOT NULL,
    cred_public_key bytea NOT NULL,
    "RegisteredUser" uuid NOT NULL,
    counter smallint NOT NULL,
    registered_device registered_device_enum NOT NULL,
    backup_eligible boolean NOT NULL,
    backup_status boolean NOT NULL DEFAULT false,
    transports jsonb NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_used timestamp without time zone,
    CONSTRAINT "Passkeys_pkey" PRIMARY KEY (cred_id, "RegisteredUser")
);

CREATE TABLE IF NOT EXISTS multi_schema."RegisteredUser"
(
    reg_user_id uuid NOT NULL,
    user_email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    user_name character varying(45) COLLATE pg_catalog."default" NOT NULL,
    role_type role_type_enum NOT NULL DEFAULT 'user'::role_type_enum,
    status boolean NOT NULL DEFAULT false,
    m2f_isenable boolean NOT NULL DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    "ServerSystem" uuid NOT NULL,
    CONSTRAINT "RegisteredUser_pkey" PRIMARY KEY (reg_user_id),
    CONSTRAINT "RegisteredUser_user_email_key" UNIQUE (user_email)
);

CREATE TABLE IF NOT EXISTS multi_schema."ServerSystem"
(
    system_id uuid NOT NULL,
    process_medias boolean NOT NULL DEFAULT false,
    license_key character varying(512) COLLATE pg_catalog."default",
    last_restore_time timestamp without time zone,
    CONSTRAINT "ServerSystem_pkey" PRIMARY KEY (system_id)
);

CREATE TABLE IF NOT EXISTS multi_schema."UploadBy"
(
    "RegisteredUser" uuid NOT NULL,
    media integer NOT NULL,
    CONSTRAINT "UploadBy_pkey" PRIMARY KEY (media, "RegisteredUser")
);

CREATE TABLE IF NOT EXISTS multi_schema."UserLog"
(
    user_log_id serial NOT NULL,
    "RegisteredUser" uuid,
    user_agent text COLLATE pg_catalog."default",
    last_url_request character varying(1024) COLLATE pg_catalog."default",
    last_logged_in timestamp without time zone,
    ip_address character varying(100) COLLATE pg_catalog."default" NOT NULL,
    logged_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "UserLog_pkey" PRIMARY KEY (user_log_id)
);

CREATE TABLE IF NOT EXISTS multi_schema."Duplicate"
(
    media integer NOT NULL,
    hash_code character varying(65),
    PRIMARY KEY (media)
);

COMMENT ON TABLE multi_schema."Duplicate"
    IS 'Check for all of media had the same hash code';

CREATE TABLE IF NOT EXISTS multi_schema."LocationMedia"
(
    media integer NOT NULL,
    location integer NOT NULL,
    CONSTRAINT "LocationMedia_pkey" PRIMARY KEY (media, location)
);

CREATE TABLE IF NOT EXISTS multi_schema."Location"
(
    location_id serial NOT NULL,
    city character varying COLLATE pg_catalog."default",
    state character varying COLLATE pg_catalog."default",
    county character varying,
    country character varying COLLATE pg_catalog."default",
    CONSTRAINT "Location_pkey" PRIMARY KEY (location_id),
    CONSTRAINT unique_city_state UNIQUE (city, state)
);

ALTER TABLE IF EXISTS multi_schema."Album"
    ADD CONSTRAINT "Album_RegisteredUser_fkey" FOREIGN KEY ("RegisteredUser")
    REFERENCES multi_schema."RegisteredUser" (reg_user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS multi_schema."AlbumMedia"
    ADD CONSTRAINT "AlbumMedia_album_fkey" FOREIGN KEY (album)
    REFERENCES multi_schema."Album" (album_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS multi_schema."AlbumMedia"
    ADD CONSTRAINT "AlbumMedia_media_fkey" FOREIGN KEY (media)
    REFERENCES multi_schema."Media" (media_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS multi_schema."ErrorLog"
    ADD CONSTRAINT "ErrorLog_server_system_fkey" FOREIGN KEY (server_system)
    REFERENCES multi_schema."ServerSystem" (system_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS multi_schema."Media"
    ADD CONSTRAINT "Media_camera_type_fkey" FOREIGN KEY (camera_type)
    REFERENCES multi_schema."CameraType" (camera_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS multi_schema."Passkeys"
    ADD CONSTRAINT "Passkeys_RegisteredUser_fkey" FOREIGN KEY ("RegisteredUser")
    REFERENCES multi_schema."RegisteredUser" (reg_user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS multi_schema."RegisteredUser"
    ADD CONSTRAINT "Server_RegisteredUser_fk" FOREIGN KEY ("ServerSystem")
    REFERENCES multi_schema."ServerSystem" (system_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS multi_schema."UploadBy"
    ADD CONSTRAINT "UploadBy_RegisteredUser_fkey" FOREIGN KEY ("RegisteredUser")
    REFERENCES multi_schema."RegisteredUser" (reg_user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS multi_schema."UploadBy"
    ADD CONSTRAINT "UploadBy_media_fkey" FOREIGN KEY (media)
    REFERENCES multi_schema."Media" (media_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS multi_schema."UserLog"
    ADD CONSTRAINT "UserLog_RegisteredUser_fkey" FOREIGN KEY ("RegisteredUser")
    REFERENCES multi_schema."RegisteredUser" (reg_user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS multi_schema."Duplicate"
    ADD CONSTRAINT media_duplicate_fk FOREIGN KEY (media)
    REFERENCES multi_schema."Media" (media_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS "Duplicate_pkey"
    ON multi_schema."Duplicate"(media);


ALTER TABLE IF EXISTS multi_schema."LocationMedia"
    ADD CONSTRAINT "LocationMedia_location_fkey" FOREIGN KEY (location)
    REFERENCES multi_schema."Location" (location_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS multi_schema."LocationMedia"
    ADD CONSTRAINT "LocationMedia_media_fkey" FOREIGN KEY (media)
    REFERENCES multi_schema."Media" (media_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;

END;